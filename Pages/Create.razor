@page "/create/block"
@inject ScriptApp.Services.ScriptService ScriptService
@using ScriptApp.Models
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JS

<div class="container mt-4">
    <div class="card shadow-sm">
        <div class="card-header bg-primary text-white">
            <h4 class="mb-0">üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è (–±–ª–æ—á–Ω—ã–π —Ä–µ–∂–∏–º)</h4>
        </div>

        <div class="card-body">
            <input @bind="Title" placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏—è"
                   class="form-control mb-3" />

            <div class="border rounded bg-light"
                 @ref="ContainerRef"
                 @onmousedown="StartDraw"
                 @onmousemove="Draw"
                 @onmouseup="EndDraw"
                 style="position: relative; width: 100%; height: 600px; overflow: hidden;">

                @foreach (var block in Blocks)
                {
                    <div class="shadow-sm"
                         style="position: absolute; left:@block.Xpx; top:@block.Ypx; 
                                width:@block.Widthpx; height:@block.Heightpx; 
                                border:1px solid #555; background:white; border-radius:6px;">

                        <textarea class="form-control"
                                  style="width:100%; height:100%; resize:none; border:none; outline:none;"
                                  @bind="block.Content"
                                  @onmousedown:stopPropagation="true"></textarea>
                    </div>
                }

                @if (IsDrawing)
                {
                    <div style="position: absolute; left:@CurrentXpx; top:@CurrentYpx; 
                                width:@CurrentWidthpx; height:@CurrentHeightpx; 
                                border:2px dashed red; border-radius:6px;">
                    </div>
                }
            </div>

            <button class="btn btn-success mt-3" @onclick="SaveScript">
                üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π
            </button>

            @if (!string.IsNullOrEmpty(Link))
            {
                <div class="alert alert-info mt-3">
                    –°—Å—ã–ª–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞: <a href="@Link">@Link</a>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string Title = "";
    private List<Block> Blocks = new();
    private bool IsDrawing = false;
    private int StartX, StartY, CurrentX, CurrentY, CurrentWidth, CurrentHeight;
    private string? Link;

    private ElementReference ContainerRef;
    private double ContainerLeft, ContainerTop;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var rect = await JS.InvokeAsync<BoundingClientRect>("getBoundingClientRect", ContainerRef);
            ContainerLeft = rect.Left;
            ContainerTop = rect.Top;
        }
    }

    void StartDraw(MouseEventArgs e)
    {
        int clickX = (int)(e.ClientX - ContainerLeft);
        int clickY = (int)(e.ClientY - ContainerTop);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–ª–∏ –ª–∏ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –±–ª–æ–∫
        foreach (var block in Blocks)
        {
            if (clickX >= block.X && clickX <= block.X + block.Width &&
                clickY >= block.Y && clickY <= block.Y + block.Height)
            {
                return; // –∫–ª–∏–∫ –ø–æ –±–ª–æ–∫—É ‚Äî –Ω–µ –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞–Ω–∏–µ
            }
        }

        // –ö–ª–∏–∫ –ø–æ –ø—É—Å—Ç–æ–º—É –º–µ—Å—Ç—É ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º —Ä–∏—Å–æ–≤–∞—Ç—å
        IsDrawing = true;
        StartX = clickX;
        StartY = clickY;
    }

    void Draw(MouseEventArgs e)
    {
        if (!IsDrawing) return;

        CurrentX = (int)Math.Min(StartX, e.ClientX - ContainerLeft);
        CurrentY = (int)Math.Min(StartY, e.ClientY - ContainerTop);
        CurrentWidth = (int)Math.Abs((e.ClientX - ContainerLeft) - StartX);
        CurrentHeight = (int)Math.Abs((e.ClientY - ContainerTop) - StartY);
    }

    void EndDraw(MouseEventArgs e)
    {
        if (!IsDrawing) return;
        IsDrawing = false;

        // –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        if (CurrentWidth > 10 && CurrentHeight > 10)
        {
            Blocks.Add(new Block
            {
                X = CurrentX,
                Y = CurrentY,
                Width = CurrentWidth,
                Height = CurrentHeight
            });
        }
    }

    void SaveScript()
    {
        var script = ScriptService.AddScript(Title, Blocks);
        Link = $"/script/{script.Id}";
    }

    private string CurrentXpx => $"{CurrentX}px";
    private string CurrentYpx => $"{CurrentY}px";
    private string CurrentWidthpx => $"{CurrentWidth}px";
    private string CurrentHeightpx => $"{CurrentHeight}px";
}
